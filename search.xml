<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Shell</title>
    <url>/2019/11/07/Shell/</url>
    <content><![CDATA[<h3 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h3><h5 id="查看当前系统shell版本：-echo-SHELL"><a href="#查看当前系统shell版本：-echo-SHELL" class="headerlink" title="查看当前系统shell版本： echo $SHELL"></a>查看当前系统shell版本： <code>echo $SHELL</code></h5><h4 id="执行shell脚本："><a href="#执行shell脚本：" class="headerlink" title="执行shell脚本："></a>执行shell脚本：</h4><ol>
<li><code>/bin/bash 文件路径/。。.sh</code> </li>
<li><code>. jiaoben.sh</code> #脚本在当前目录下</li>
<li><code>source jioaben.sh</code> </li>
</ol>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量  "></a>变量  <a id="more"></a></h4><p><strong>普通变量</strong></p>
<p><strong>命令变量</strong> </p>
<ul>
<li><p>变量名 = ```命令`  `` (非单引号)</p>
</li>
<li><p>变量名 = $(命令)</p>
</li>
</ul>
<h5 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h5><p><strong>env</strong> 查看全局变量</p>
<p><strong>定义全局变量</strong> </p>
<p><code>export 变量 = 值</code> （推荐）</p>
<blockquote>
<p> 变量 = 值</p>
<p><code>export 变量</code> </p>
</blockquote>
<h5 id="查看变量"><a href="#查看变量" class="headerlink" title="查看变量"></a>查看变量</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ “变量”</span><br><span class="line">$ &#123;变量&#125;</span><br><span class="line">$ 变量</span><br></pre></td></tr></table></figure>



<h5 id="取消变量-删除"><a href="#取消变量-删除" class="headerlink" title="取消变量(删除)"></a>取消变量(删除)</h5><p><code>unset 变量名</code> </p>
<h5 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$n 获取第n个参数</span><br><span class="line">$# 获取传参总数量</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$?</span><br><span class="line">0   执行成功（上一条指令）</span><br><span class="line">非0 执行失败</span><br></pre></td></tr></table></figure>

<h5 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. [ 1 =2 ] # []两端有空格</span><br><span class="line">2. test 1=2</span><br></pre></td></tr></table></figure>

<h5 id="diff-对比文件差异"><a href="#diff-对比文件差异" class="headerlink" title="diff 对比文件差异"></a>diff 对比文件差异</h5><blockquote>
<h2 id="diff-file1-file2可以对比两个文件file1和file2的差异。一般在对比时是以第二个文件为标准的。比如说2d1的意思是第一个文件第二行删除linux就会和第二个文件内容一致。1a2意思是说第一个文件添加linux内容就会与第二个文件内容一致。还会有比如2c2意思是第一个文件第二行改变内容就会和第二个文件的内容一致。"><a href="#diff-file1-file2可以对比两个文件file1和file2的差异。一般在对比时是以第二个文件为标准的。比如说2d1的意思是第一个文件第二行删除linux就会和第二个文件内容一致。1a2意思是说第一个文件添加linux内容就会与第二个文件内容一致。还会有比如2c2意思是第一个文件第二行改变内容就会和第二个文件的内容一致。" class="headerlink" title=" diff   file1 file2可以对比两个文件file1和file2的差异。一般在对比时是以第二个文件为标准的。比如说2d1的意思是第一个文件第二行删除linux就会和第二个文件内容一致。1a2意思是说第一个文件添加linux内容就会与第二个文件内容一致。还会有比如2c2意思是第一个文件第二行改变内容就会和第二个文件的内容一致。"></a> diff   file1 file2可以对比两个文件file1和file2的差异。一般在对比时是以第二个文件为标准的。比如说2d1的意思是第一个文件第二行删除linux就会和第二个文件内容一致。1a2意思是说第一个文件添加linux内容就会与第二个文件内容一致。还会有比如2c2意思是第一个文件第二行改变内容就会和第二个文件的内容一致。</h2></blockquote>
<p><img src="image/Shell/201806141601138.png" alt="201806141601138"></p>
<p>  diff 指令也可以用来对比两个<strong>目录</strong>的内容： </p>
<p><img src="image/Shell/20180614161242275.png" alt="20180614161242275"></p>
<h5 id="sort和uniq的使用："><a href="#sort和uniq的使用：" class="headerlink" title="sort和uniq的使用："></a>sort和uniq的使用：</h5><p>  统计文件中每个数字出现的个数：  左边为数字个数，右边为排序后的数字 <img src="image/20180614161734504.png" alt="20180614161734504"></p>
<p> 只显示唯一的数字：</p>
<p><img src="image/Shell/20180614161908335.png" alt="20180614161908335"></p>
<p> 只显示重复的数字：</p>
<p><img src="image/Shell/20180614161936303.png" alt="20180614161936303"></p>
<p> <strong>3. test指令：</strong></p>
<p><img src="image/Shell/2018061416211337.png" alt="2018061416211337"></p>
<p><img src="image/Shell/20180614162134822.png" alt="20180614162134822"></p>
<blockquote>
<p>举例：test命令书写脚本比较数的大小</p>
</blockquote>
<pre><code>其中-z用来判断是否从键盘收了数据$1,&amp;&amp;指前面的条件为真，就执行后面的指令。在第一行指令的意思是如果没有从键盘接收到$1数据，就执行后面的指令。与&amp;&amp;相对立的指令为||，意思是如果前面的条件为假，就执行||后面的指令：</code></pre><blockquote>
<hr>
</blockquote>
<p><img src="image/Shell/20180614162304862.png" alt="20180614162304862"></p>
<p> <strong>4.  tr指令<img src="image/Shell/20180614162727711.png" alt="20180614162727711">：用来进行大小写字母的转换：</strong> </p>
<blockquote>
<p> 举例：将从键盘接收的字母，以不区分大小写的方式判断其是否为hello.如果是，输出yes，如果不是，输出no。指令tr ‘A-z’  ‘a-z’就是用来完成大写字母到小写字母的转换： </p>
</blockquote>
<p><img src="image/Shell/20180614163538393.png" alt="20180614163538393"></p>
<p><img src="image/Shell/20180614163743140.png" alt="20180614163743140"></p>
<h5 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ "$#" -eq 1 ]</span><br><span class="line">then</span><br><span class="line">	echo</span><br><span class="line">elif []</span><br><span class="line">then</span><br><span class="line">	echo</span><br><span class="line">else</span><br><span class="line">	echo</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h5 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a = "$1"</span><br><span class="line">case "$&#123;a&#125;" in </span><br><span class="line">值1)</span><br><span class="line">	echo</span><br><span class="line">	;;</span><br><span class="line">值2)</span><br><span class="line">	echo</span><br><span class="line">	;;</span><br><span class="line">*)</span><br><span class="line">	echo</span><br><span class="line">	;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<h5 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h5><p><code>若shell语句存在$()</code> </p>
<p> <code>先执行()里面的语句</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for i in $(ls /root)</span><br><span class="line">do</span><br><span class="line">	echo</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h5 id="while-语句"><a href="#while-语句" class="headerlink" title="while 语句"></a>while 语句</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a = 1</span><br><span class="line">while [ "$&#123;a&#125; -lt 5" ] </span><br><span class="line">do</span><br><span class="line"> 	echo "$&#123;a&#125;"</span><br><span class="line">	a=$((a+1))   #(())计算表达式</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h5 id="until-语句"><a href="#until-语句" class="headerlink" title="until 语句"></a>until 语句</h5><p><code>条件满足,退出</code> </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a = 1</span><br><span class="line">until [ "$&#123;a&#125; -eq 5" ] </span><br><span class="line">do</span><br><span class="line"> 	echo "$&#123;a&#125;"</span><br><span class="line">	a=$((a+1))   </span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">定义函数/ 函数名自定义(dayin)</span></span><br><span class="line">dayin()&#123;</span><br><span class="line">	echo "$1"  #获取函数的参数</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">调用函数</span></span><br><span class="line">dayin "$1"   #获取脚本的参数</span><br></pre></td></tr></table></figure>









]]></content>
  </entry>
  <entry>
    <title>The Frist File</title>
    <url>/2019/11/05/The-Frist-File/</url>
    <content><![CDATA[<h3 id="我的第一篇Blog"><a href="#我的第一篇Blog" class="headerlink" title="我的第一篇Blog"></a>我的第一篇Blog</h3><p><a href="https://Leify-li.github.io" target="_blank" rel="noopener">点这里</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE FirstBlog</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/11/05/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>数据结构和算法</title>
    <url>/2019/10/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p><code>冒泡排序/选择排序/插入排序/希尔排序/快速排序</code></p>
<h3 id="稳定排序："><a href="#稳定排序：" class="headerlink" title="稳定排序："></a>稳定排序：</h3><ul>
<li>稳定排序会让原本有相等键值的记录维持相对的次序<ul>
<li>排序后，相同值数据前后顺序不变的，为稳定排序</li>
<li>反之，为不稳定排序</li>
</ul>
</li>
</ul>
<h5 id="不稳定的排序："><a href="#不稳定的排序：" class="headerlink" title="不稳定的排序："></a>不稳定的排序：<a id="more"></a></h5><ul>
<li><strong>选择排序不稳定</strong>  </li>
<li>希尔排序</li>
<li>快速排序</li>
</ul>
<h3 id="归并排序（nlogn）"><a href="#归并排序（nlogn）" class="headerlink" title="归并排序（nlogn）"></a>归并排序（nlogn）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">marge_sort</span><span class="params">(alist)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(alist) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> alist</span><br><span class="line">    n = len(alist) // <span class="number">2</span></span><br><span class="line">    left = marge_sort(alist[:n])</span><br><span class="line">    right = marge_sort(alist[n:])</span><br><span class="line">    <span class="comment"># print(left,'---', right)</span></span><br><span class="line">    <span class="keyword">return</span> marge(left, right)      <span class="comment"># 必须要有返回值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">marge</span><span class="params">(alist, blist)</span>:</span></span><br><span class="line">    <span class="string">'''合并操作，将两个有序数组left[]和right[]合并成一个大的有序数组'''</span></span><br><span class="line">    l, r = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    newlist = []</span><br><span class="line">    <span class="keyword">while</span> l &lt; len(alist) <span class="keyword">and</span> r &lt; len(blist):</span><br><span class="line">        <span class="keyword">if</span> alist[l] &lt;= blist[r]:</span><br><span class="line">            newlist.append(alist[l])</span><br><span class="line">            l += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            newlist.append(blist[r])</span><br><span class="line">            r += <span class="number">1</span></span><br><span class="line">    newlist += alist[l:]</span><br><span class="line">    newlist += blist[r:]</span><br><span class="line">    <span class="keyword">return</span> newlist</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
